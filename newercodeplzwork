<!DOCTYPE html>
<html>
    <head>
        <title>EmulatorJS | Demo</title>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" href="favicon.ico" sizes="16x16 32x32 48x48 64x64" type="image/vnd.microsoft.icon">
        <link rel="apple-touch-icon" href="img/icon.png" />
        <link rel="manifest" href="manifest.json" />
        <meta name="theme-color" content="#000"/>
        <link rel="stylesheet" href="main.css"/>
    <style>
    body,
html {
    height: 100%;
    background-color: black;
    color: white;
}

body {
    margin: 0;
    overflow: hidden;
}

body,
#box,
#top {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
}

#box {
    color: #aaa;
    height: 20em;
    width: 30em;
    max-width: 80%;
    max-height: 80%;
    background-color: #333;
    border-radius: 0.4em;
    border: 2px solid #555;
    position: relative;
    flex-direction: column;
    transition-duration: 0.2s;
    overflow: hidden;
    font-family: monospace;
    font-weight: bold;
    font-size: 20px;
    margin: 5px;
    padding: 10px;
    text-align: center;
}

#box:hover,
#box[drag] {
    border-color: #1AAFFF;
    color: #ddd
}

#input {
    cursor: pointer;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
}

#display {
    width: 100%;
    height: 100%
}

select,
input[type="text"],
button {
    padding: 0 0.4em;
    margin: 0.5em 0.1em;
    width: 15em;
    max-width: 100%;
    font-family: monospace;
    font-weight: bold;
    font-size: 16px;
    background-color: #444;
    color: #aaa;
    border-radius: 0.4em;
    border: 1px solid #555;
    cursor: pointer;
    transition-duration: 0.2s;
    vertical-align: top;
    height: 2.5em;
}

select:hover,
button:hover {
    background-color: #666;
    color: #ddd
}

.logo {
    width: 130px;
    height: 130px;
    filter: drop-shadow(0 0 8px white);
}

#top,
#version {
    margin: 5px;
}

#version button {
    fill: #aaa;
    width: auto;
    padding: 0.2em 0.3em;
    text-align: center;
    margin: 0.5em 0.1em;
}

#version svg {
    margin-top: 0.05em;
    margin-left: 0.05em;
    width: 1.8em;
}

.popup {
    position: fixed;
    top: 50%;
    left: 50%;
    width: 100%;
    height: 100%;
    z-index: 2000;
    visibility: hidden;
    -webkit-backface-visibility: hidden;
    -moz-backface-visibility: hidden;
    backface-visibility: hidden;
}

.popup .content {
    background-color: #333;
    border-radius: 0.4em;
    border: 2px solid #555;
    padding: 1em;
    max-width: 80%;
    max-height: 80%;
    min-width: 30%;
    width: min-content;
    position: fixed;
    overflow-x: auto;
}

.show {
    visibility: visible;
}

.popup-overlay {
    position: fixed;
    width: 100%;
    height: 100%;
    visibility: hidden;
    top: 0;
    left: 0;
    z-index: 1000;
    opacity: 0;
    background-color: rgba(0, 0, 0, 0.5);
    -webkit-transition: all 0.3s;
    transition: all 0.3s;
}

.show~.popup-overlay {
    opacity: 1;
    visibility: visible;
}

.popup-animate .content {
    -webkit-transform: translateX(-50%) translateY(-50%) scale(0.7);
    -ms-transform: translateX(-50%) translateY(-50%) scale(0.7);
    transform: translateX(-50%) translateY(-50%) scale(0.7);
    opacity: 0;
    -webkit-transition: all 0.3s;
    transition: all 0.3s;
}

.show.popup-animate .content {
    -webkit-transform: translateX(-50%) translateY(-50%) scale(1);
    -ms-transform: translateX(-50%) translateY(-50%) scale(1);
    transform: translateX(-50%) translateY(-50%) scale(1);
    opacity: 1;
}

.popup .title,
.popup .options p {
    display: flex;
    align-items: center;
}

.popup .options p {
    margin: 0.5em 0;
    font-size: 18px;
}

.popup .title h1 {
    margin: 0 0 0.3em;
    font-size: 48px;
}

.popup .bottom {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    margin-top: 1em;
}

.buttonbox {
    display: inline-flex;
    align-items: baseline;
    flex-wrap: wrap;
    margin-bottom: 0.2em;
}

.buttonbox.last {
    margin-bottom: 0 !important;
}

.buttonbox p {
    margin: 0 !important;
}

.buttonbox select,
.buttonbox input[type="text"],
.buttonbox button {
    padding: 0 0.4em;
    margin: 0.5em;;
    width: auto;
    font-size: 14px;
    height: 2em;
}

.buttonbox button:disabled,
.buttonbox select:disabled,
.buttonbox input[type="text"]:disabled {
    background-color: #666;
    color: #aaa;
    cursor: not-allowed;
}

.hide {
    display: none !important;
}

.switch {
    position: relative;
    display: inline-block;
    width: 51px;
    height: 25px;
    margin: 0.5em;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: .4s;
    transition: .4s;
}

.slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    -webkit-transition: .4s;
    transition: .4s;
}

input:checked+.slider {
    background-color: #1AAFFF;
}

input:focus+.slider {
    box-shadow: 0 0 1px #1AAFFF;
}

input:checked+.slider:before {
    -webkit-transform: translateX(26px);
    -ms-transform: translateX(26px);
    transform: translateX(26px);
}

.slider.round {
    border-radius: 34px;
}

.slider.round:before {
    border-radius: 50%;
}

    </style>
    </head>
    <body>
        <div id="top">
            <h1>EmulatorJS Demo</h1>
            <img src="img/logo-light.png" alt="Logo" class="logo">
        </div>
        <div id="box">
            <input type="file" id="input">
            Drag ROM file or click here
        </div>
        <div id="version">
            <select id="version-select"></select>
            <button id="download" class="hide" onclick="downloadversion()">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
                    <path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2m2.354 6.854-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 9.293V5.5a.5.5 0 0 1 1 0v3.793l1.146-1.147a.5.5 0 0 1 .708.708"/>
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg"viewBox="0 0 16 16">
                    <path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2m2.354 4.854-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7 8.793l2.646-2.647a.5.5 0 0 1 .708.708"/>
                </svg>
            </button>
            <button id="settings">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
                    <path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"/>
                </svg>
            </button>
        </div>
        <div id="popup-settings" class="popup popup-animate">
            <div class="content">
                <div class="title">
                    <h1>Settings</h1>
                </div>
                <div class="options">
                    <div class="buttonbox"><p>Enable Debuging: <label class="switch"><input type="checkbox" id="debug"/><span class="slider round"></span></label></p></div><br>
                    <div class="buttonbox"><p>Clean Cache: </p><button id="cache">Clean</button></div><br>
                    <div class="buttonbox"><p>Language: </p><select id="language"></select> <p id="languageHelp"></p></div><br>
                    <div class="buttonbox last"><p>Custom Path: </p><input type="text" id="customPath" placeholder="https://cdn.emulatorjs.org/stable/"></input> <p id="customPathValid"></p></div>
                    <p id="offline-status">Offline Status: CHECKING</p>
                    <p>Offline Cores will be available soon.</p>
                    <p class="hide">Remove All Saved Versions: <button id="remove-version" onclick="removeallsaved()">Remove All</button></p>
                    <div id="installbox" class="buttonbox"><p id="installboxtext">Install PWA: </p><button id="install">Install</button></div><br>
                    </div>
                <div class="bottom">
                    <button id="settings-close">Close</button>
                </div>
            </div>
        </div>
        <div class="popup-overlay"></div>
        <script src="main.js"></script>
        <script>
            if ("serviceWorker" in navigator) {
                const req = navigator.serviceWorker.register("sw.js");
            };

            loadJSON("/versions", (response) => {
                const offlineStatus = document.getElementById("offline-status");
                if (!response) {
                    loadJSON("https://cdn.emulatorjs.org/versions.json", resp => loadVersions(resp));
                    offlineStatus.textContent = "Offline Status: NOT INSTALLED";
                } else {
                    loadVersions(response);
                    offlineStatus.textContent = "Offline Status: READY";
                }
            });

            loadSettings();

            input.addEventListener("change", async () => {
                const url = input.files[0];
                const parts = input.files[0].name.split(".");

                const core = await (async (ext) => {
                    if (["fds", "nes", "unif", "unf"].includes(ext))
                        return "nes"

                    if (["smc", "fig", "sfc", "gd3", "gd7", "dx2", "bsx", "swc"].includes(ext))
                        return "snes"

                    if (["z64", "n64"].includes(ext))
                        return "n64"

                    if (["pce"].includes(ext))
                        return "pce"

                    if (["ngp", "ngc"].includes(ext))
                        return "ngp"

                    if (["ws", "wsc"].includes(ext))
                        return "ws"

                    if (["col", "cv"].includes(ext))
                        return "coleco"

                    if (["d64"].includes(ext))
                        return "vice_x64"

                    if (["nds", "gba", "gb", "z64", "n64"].includes(ext))
                        return ext

                    return await new Promise(resolve => {
                        const cores = {
                            "Nintendo 64": "n64",
                            "Nintendo Game Boy": "gb",
                            "Nintendo Game Boy Advance": "gba",
                            "Nintendo DS": "nds",
                            "Nintendo Entertainment System": "nes",
                            "Super Nintendo Entertainment System": "snes",
                            "PlayStation": "psx",
                            "Virtual Boy": "vb",
                            "Sega Mega Drive": "segaMD",
                            "Sega Master System": "segaMS",
                            "Sega CD": "segaCD",
                            "Atari Lynx": "lynx",
                            "Sega 32X": "sega32x",
                            "Atari Jaguar": "jaguar",
                            "Sega Game Gear": "segaGG",
                            "Sega Saturn": "segaSaturn",
                            "Atari 7800": "atari7800",
                            "Atari 2600": "atari2600",
                            "NEC TurboGrafx-16/SuperGrafx/PC Engine": "pce",
                            "NEC PC-FX": "pcfx",
                            "SNK NeoGeo Pocket (Color)": "ngp",
                            "Bandai WonderSwan (Color)": "ws",
                            "ColecoVision": "coleco",
                            "Commodore 64": "vice_x64",
                            "Commodore 128": "vice_x128",
                            "Commodore VIC20": "vice_xvic",
                            "Commodore Plus/4": "vice_xplus4",
                            "Commodore PET": "vice_xpet",
                            "PlayStation Portable": "psp",
                            "DOS": "dosbox_pure"
                        }

                        const button = document.createElement("button")
                        const select = document.createElement("select")

                        for (const type in cores) {
                            const option = document.createElement("option")

                            option.value = cores[type]
                            option.textContent = type
                            select.appendChild(option)
                        }

                        button.onclick = () => resolve(select[select.selectedIndex].value)
                        button.textContent = "Load game"
                        box.innerHTML = ""

                        box.appendChild(select)
                        box.appendChild(button)
                    })
                })(parts.pop())

                const div = document.createElement("div")
                const sub = document.createElement("div")
                const script = document.createElement("script")

                sub.id = "game"
                div.id = "display"

                const top = document.getElementById("top");
                const version = document.getElementById("version");
                top.remove();
                version.remove();
                box.remove();
                div.appendChild(sub)
                document.body.appendChild(div)

                const cdn = window.cdn || "https://cdn.emulatorjs.org/stable/data/"

                window.EJS_player = "#game";
                window.EJS_gameName = parts.shift();
                window.EJS_biosUrl = "";
                window.EJS_gameUrl = url;
                window.EJS_core = core;
                window.EJS_pathtodata = cdn;
                window.EJS_startOnLoaded = true;
                window.EJS_AdUrl = "ads.html";
                window.EJS_DEBUG_XX = window.debug;
                if (window.language !== "auto") {
                    window.EJS_language = window.language;
                }
                if (core === "psp" || core === "dosbox_pure") {
                    window.EJS_threads = true;
                }
                window.EJS_ready = function() {
                    detectAdBlock("data:text/html;base64,DQo8aHRtbD48c3R5bGU+I2FkYmxvY2t7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC44KTtwb3NpdGlvbjpmaXhlZDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3RvcDowO2xlZnQ6MDt6LWluZGV4OjEwMDA7dGV4dC1hbGlnbjpjZW50ZXI7Y29sb3I6I2ZmZn1ib2R5LGh0bWx7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH1hIHtjb2xvcjogIzAwYWZlNDt9PC9zdHlsZT48Ym9keSBzdHlsZT0ibWFyZ2luOjAiPjxkaXYgaWQ9ImFkYmxvY2siPjxoMT5IaSBBZGJsb2NrIFVzZXIhPC9oMT48cD5BZHMgb24gdGhpcyBwYWdlIG1heSBjb21lIGFuZCBnbyBkZXBlbmRpbmcgb24gaG93IG1hbnkgcGVvcGxlIGFyZSBmdW5kaW5nIHRoaXMgcHJvamVjdC48YnI+WW91IGNhbiBoZWxwIGZ1bmQgdGhpcyBwcm9qZWN0IG9uIDxhIHRhcmdldD0iX2Fib3V0IiBocmVmPSJodHRwczovL3BhdHJlb24uY29tL0VtdWxhdG9ySlMiPnBhdHJlb248L2E+PC9wPjwvZGl2PjwvYm9keT48L2h0bWw+");
                }
                
                script.src = cdn + "loader.js";
                document.body.appendChild(script);
            });

            box.ondragover = () => box.setAttribute("drag", true);
            box.ondragleave = () => box.removeAttribute("drag");

            let installPrompt = null;
            const installButton = document.querySelector("#install");
            const installBox = document.querySelector("#installbox");
            const installBoxText = document.querySelector("#installboxtext");
            localStorage.setItem("pwa", "false");

            window.addEventListener("beforeinstallprompt", (event) => {
                event.preventDefault();
                installPrompt = event;
                localStorage.setItem("pwa", "true");
                installButton.textContent = "Install";
                installButton.disabled = false;
                console.log("Supported");
            });

            installButton.addEventListener("click", async () => {
                if (!installPrompt) {
                    return;
                }
                const result = await installPrompt.prompt();
                console.log(`Install prompt was: ${result.outcome}`);
                installPrompt = null;
            });

            document.addEventListener('visibilitychange', function() {
                window.matchMedia('(display-mode: standalone)').addListener(event => {
                    if (event.matches) {
                        checkinstall(true);
                    }
                });
            });
        function loadJSON(url, callback) {
    if (typeof fetch === 'function') {
        fetch(url)
            .then(response => {
                if (response.ok) {
                    return response.text();
                } else {
                    return null;
                }
            })
            .then(data => callback(data))
            .catch(() => callback(null));
    } else {
        var xobj = new XMLHttpRequest();
        xobj.overrideMimeType("application/json");
        xobj.open('GET', url, true);
        xobj.onreadystatechange = function () {
            if (xobj.readyState === 4) {
                if (xobj.status === 200) {
                    callback(xobj.responseText);
                } else {
                    callback(null);
                }
            }
        };
        xobj.send();
    }
}

function loadVersions(response) {
    const version_select = document.getElementById("version-select");
    var versions = JSON.parse(response);
    version_select.innerHTML = "";
    addOptions(version_select, versions.releases, versions.default, versions.github);
    addOptions(version_select, { "custom": "" }, versions.default);
    addOptions(version_select, versions.versions, versions.default);
    version_select.addEventListener("change", () => {
        versionChange();
    });
}

function versionChange(key, value) {
    if (key && value) {
        localStorage.setItem("version", value);
        setCDNPath(key);
        checkSettings(value);
    } else {
        const version_select = document.getElementById("version-select");
        localStorage.setItem("version", version_select[version_select.selectedIndex].textContent);
        setCDNPath(version_select[version_select.selectedIndex].value);
        checkSettings(version_select[version_select.selectedIndex].textContent);
    }
}

function setCDNPath(option) {
    console.log("CDN Path: " + option);
    if (option === "custom/") {
        console.log("Using custom path");
        window.cdn = localStorage.getItem("custom_cdn");
    } else {
        window.cdn = "https://cdn.emulatorjs.org/" + option + "data/";
    }
}

function detectAdBlock(url) {
    let adBlockEnabled = false;
    try {
        const adframe = document.querySelector('iframe[src="' + window.EJS_AdUrl + '"]');
        var adpage = adframe.contentWindow.document;
        window.EJS_AdUrl = adframe.src;
        if (!adpage) {
            adBlockEnabled = true;
        }
    } catch (e) {
        adBlockEnabled = true;
    }
    if (adBlockEnabled) {
        window.EJS_adBlocked(url);
    }
}

function addOptions(select, options, default_option, github) {
    for (const version in options) {
        const option = document.createElement("option");
        option.value = options[version];
        if (version == "stable") {
            option.textContent = "stable (" + github + ")";
        } else {
            option.textContent = version;
        }
        const saveVersion = localStorage.getItem("version");
        if (version === "custom") {
            option.id = "custom-version";
            if (localStorage.getItem("custom_cdn")) {
                option.value = "custom/";
            } else {
                option.disabled = true;
            }
        }
        if ((saveVersion && saveVersion === version) || (!saveVersion && version === default_option.split("/")[0]) || saveVersion.includes(version)) {
            option.selected = true;
            versionChange(option.value, option.textContent);
        }
        select.appendChild(option);
    }
}

function loadSettings() {
    const settingsButton = document.getElementById("settings");
    const settingsClose = document.getElementById("settings-close");
    settingsButton.addEventListener("click", () => {
        document.getElementById("popup-settings").classList.add("show");
        if (localStorage.getItem("pwa") == "false") {
            checkinstall();
        }
    });
    settingsClose.addEventListener("click", () => {
        document.getElementById("popup-settings").classList.remove("show");
    });

    window.debug = false;
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    const debugCheckbox = document.getElementById("debug");
    if (parseInt(urlParams.get('debug')) === 1 || urlParams.get('debug') === "true") {
        debug = true;
        console.log("Debug is enabled");
        debugCheckbox.checked = true;
    } else {
        console.log("Debug is disabled");
        debugCheckbox.checked = false;
    }

    debugCheckbox.addEventListener("change", () => {
        enableDebug = debugCheckbox.checked;
        console.log("Debug is now " + (enableDebug ? "enabled" : "disabled"));
        if (enableDebug) {
            history.replaceState(null, '', '?debug=1');
        } else {
            history.replaceState(null, '', window.location.pathname);
        }
    });

    let systemLang;
    try {
        systemLang = Intl.DateTimeFormat().resolvedOptions().locale;
    } catch(e) {}
    console.log("System language: " + systemLang);
    const lang_select = document.getElementById("language");
    loadLanguages(systemLang, lang_select);
    lang_select.addEventListener("change", () => {
        const selectedLang = lang_select.value;
        window.language = selectedLang;
        localStorage.setItem("language", selectedLang);
        console.log("Language changed to: " + selectedLang);
    });

    const customPathInput = document.getElementById("customPath");
    const customPathValid = document.getElementById("customPathValid");
    const savedPath = localStorage.getItem("custom_cdn");
    const urlRegex = /^(https?:\/\/)(localhost|\d{1,3}(\.\d{1,3}){3}|([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,})(:\d+)?(\/.*)?\/$/;
    if (savedPath && urlRegex.test(savedPath)) {
        customPathInput.value = savedPath;
        customPathValid.textContent = "Valid URL";
        customPathValid.style.color = "green";
    } else {
        localStorage.removeItem("custom_cdn");
    }
    let pathValid = false;
    customPathInput.addEventListener("input", () => {
        const customPath = customPathInput.value.trim();
        
        if (urlRegex.test(customPath)) {
            customPathValid.textContent = "Valid URL";
            customPathValid.style.color = "green";
            pathValid = true;
        } else if(customPath === "") {
            customPathValid.textContent = "";
            customPathValid.style.color = "";
            pathValid = false;
        } else {
            customPathValid.textContent = "Invalid URL";
            customPathValid.style.color = "red";
            pathValid = false;
        }
    });
    customPathInput.addEventListener("change", () => {
        const customOption = document.getElementById("custom-version");
        const versionSelect = document.getElementById("version-select");
        const customPath = customPathInput.value.trim();
        if (pathValid) {
            customOption.disabled = false;
            versionSelect.selectedIndex = 3;
            localStorage.setItem("custom_cdn", customPath);
        } else {
            customOption.disabled = true;
            versionSelect.selectedIndex = 0;
            localStorage.removeItem("custom_cdn");
        }
        versionChange();
    });

    const cacheButton = document.getElementById("cache");
    cacheButton.addEventListener("click", () => {
        if (confirm("Are you sure you want to clear the cache? This will remove all saved data.")) {
            localStorage.clear();
            console.log("Cleared localStorage");
            indexedDB.databases().then(dbs => {
                dbs.forEach(db => {
                if (db.name) {
                    indexedDB.deleteDatabase(db.name);
                    console.log(`Deleted IndexedDB: ${db.name}`);
                }
                });
            });
            caches.keys().then(cacheNames => {
                return Promise.all(
                    cacheNames.map(name => {
                        console.log(`Deleting cache: ${name}`);
                        return caches.delete(name);
                    })
                );
            });
        }
    });
}

function checkSettings(version) {
    if (version.includes("stable")) {
        version = version.replace("stable (", "").replace(")", "");
    }
    const lang_select = document.getElementById("language");
    const langHelp = document.getElementById("languageHelp");
    if (version === "custom" || version === "latest" || version === "nightly" || version > "4.2.2") {
        console.log("Language Support: Enabled");
        lang_select.disabled=false;
        lang_select.style.width = "auto";
        langHelp.innerHTML = "";
    } else {
        console.log("Language Support: Disabled");
        lang_select.disabled=true;
        lang_select.style.width = "140px";
        langHelp.innerHTML = "Language selection isn't available for versions 4.2.2 and below.";
    }
}

function checkinstall(overide) {
    console.log("Checking install");
    if (navigator.userAgent.includes("Firefox") || (navigator.userAgent.includes("OPR") && !navigator.userAgent.includes("Mobile"))) {
        installButton.style.display = "none";
        installBoxText.innerHTML = "PWA's are not supported on this browser.";
        return;
    }
    if (window.matchMedia('(display-mode: standalone)').matches || overide) {
        installButton.textContent = "Installed";
        installButton.disabled = true;
        installButton.style.display = "inline";
        installBoxText.innerHTML = "Install PWA: ";
    } else {
        installButton.style.display = "none";
        if (navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome")) {
            installBoxText.innerHTML = "PWA's are supported on this browser, but prompt is not supported.<br> Please install manually";
            return;
        }
        if ('getInstalledRelatedApps' in navigator) {
            navigator.getInstalledRelatedApps().then((relatedApps) => {
                if (relatedApps.length > 0) {
                    checkinstall(true);
                    return;
                }
            });
        }
        installBoxText.innerHTML = "PWA is either already installed, or prompt is not supported on this browser.<br> Please install manually.<br>Note: PWA's are not supported in Incognito/Private mode.";
    }
}

function loadLanguages(sysLang, lang_select) {
    langs = {
        "auto": "Auto (" + sysLang + ")",
        "en": "English (US)",
        "pt": "Portuguese (Brazil)",
        "es": "Spanish (Latin America)",
        "el": "Greek (Modern Greek)",
        "ja": "Japanese (Japan)",
        "zh": "Chinese (Simplified)",
        "hi": "Hindi (India)",
        "ar": "Arabic (Saudi Arabia)",
        "jv": "Javanese (Indonesia)",
        "bn": "Bengali (Bangladesh)",
        "ru": "Russian (Russia)",
        "de": "German (Germany)",
        "ko": "Korean (South Korea)",
        "af": "French (France)",
        "it": "Italian (Italy)",
        "tr": "Turkish (Turkey)",
        "fa": "Persian (Afghanistan)",
        "ro": "Romanian (Romania)",
        "vi": "Vietnamese (Vietnam)"
    };
    for (const lang in langs) {
        const option = document.createElement("option");
        option.value = lang;
        option.textContent = langs[lang];
        lang_select.appendChild(option);
    }
    let selectedLang = localStorage.getItem("language");
    if (selectedLang) {
        lang_select.value = selectedLang;
    } else {
        localStorage.setItem("language", "auto");
    }
}

        </script>
    <script defer src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon='{"version":"2024.11.0","token":"192fdaadd1094fdfa2eb6daf77e04988","r":1,"server_timing":{"name":{"cfCacheStatus":true,"cfEdge":true,"cfExtPri":true,"cfL4":true,"cfOrigin":true,"cfSpeedBrain":true},"location_startswith":null}}' crossorigin="anonymous"></script>
</body>
</html>
